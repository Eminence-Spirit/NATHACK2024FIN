# Rename columns for clarity
colnames(data) <- c("Sleep_Quality", "Headaches_Per_Week", "Academic_Performance",
"Study_Load", "Extracurricular_Activities", "Stress_Levels")
# Adjust 'Headaches_Per_Week' by subtracting 1
data$Headaches_Per_Week <- data$Headaches_Per_Week - 1
# Set random seed for reproducibility and split the data
set.seed(123)
split <- sample.split(data$Stress_Levels, SplitRatio = 0.75)
train_data <- subset(data, split == TRUE)
test_data <- subset(data, split == FALSE)
# Prepare training and testing matrices
X_train <- as.matrix(train_data[, c("Sleep_Quality", "Academic_Performance", "Study_Load", "Extracurricular_Activities")])
Y_train_Stress_Levels <- train_data$Stress_Levels
Y_train_Headaches_Per_Week <- train_data$Headaches_Per_Week
X_test <- as.matrix(test_data[, c("Sleep_Quality", "Academic_Performance", "Study_Load", "Extracurricular_Activities")])
Y_test_Stress_Levels <- test_data$Stress_Levels
Y_test_Headaches_Per_Week <- test_data$Headaches_Per_Week
# Train Random Forest models
rf_model_Stress_Levels <- randomForest(X_train, Y_train_Stress_Levels, ntree = 100, importance = TRUE)
rf_model_Headaches_Per_Week <- randomForest(X_train, Y_train_Headaches_Per_Week, ntree = 100, importance = TRUE)
# Make predictions on test data
Stress_Levels_pred <- predict(rf_model_Stress_Levels, X_test)
Headaches_Per_Week_pred <- predict(rf_model_Headaches_Per_Week, X_test)
# Evaluate performance
rmse_Stress_Levels <- sqrt(mean((Y_test_Stress_Levels - Stress_Levels_pred)^2))
rmse_Headaches_Per_Week <- sqrt(mean((Y_test_Headaches_Per_Week - Headaches_Per_Week_pred)^2))
# Map input_vector to features
new_data <- data.frame(
Sleep_Quality = input_vector[1],
Academic_Performance = input_vector[2],
Study_Load = input_vector[3],
Extracurricular_Activities = input_vector[4]
)
# Make predictions for new data
Stress_Levels_pred_new <- predict(rf_model_Stress_Levels, new_data)
Headaches_Per_Week_pred_new <- predict(rf_model_Headaches_Per_Week, new_data)
# Return predictions as a list
return(list(
Stress_Levels = Stress_Levels_pred_new,
Headaches_Per_Week_Probability = Headaches_Per_Week_pred_new / 4 * 100
))
}
# Load necessary libraries
library(plumber)
library(randomForest)
library(jsonlite)
# Source the model function from the file random.tree.R
source("random.tree.R")  # Make sure random.tree.R contains the function_name function
# Load necessary libraries
library(plumber)
library(randomForest)
library(jsonlite)
# Source the model function from the file random.tree.R
source("random.forest.R")  # Make sure random.tree.R contains the function_name function
#* @apiTitle Stress Prediction API
#* @apiDescription API to predict stress levels and headaches per week based on user input.
# Enable CORS to allow requests from the front end
# This allows interaction between the API and a web front end
pr <- plumber$new()
pr$handle("OPTIONS", "*", function(res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type")
res$setHeader("Access-Control-Max-Age", "86400")
res
})
#* Predict Stress Levels and Headaches
#* @param Sleep_Quality Sleep quality score (e.g., 1-10)
#* @param Academic_Performance Academic performance score (e.g., 1-100)
#* @param Study_Load Study load in hours per day
#* @param Extracurricular_Activities Hours of extracurricular activities per week
#* @post /predict
pr$handle("POST", "/predict", function(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities) {
# Convert inputs to numeric values
input_vector <- as.numeric(c(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities))
# Validate input: Check if all inputs are numeric
if (any(is.na(input_vector))) {
stop("Invalid input: all parameters must be numeric and not empty.")
}
# Call the model function with the input vector
results <- function_name(input_vector)
# Return the results as JSON
list(
Predicted_Stress_Levels = results$Stress_Levels,
Predicted_Headaches_Per_Week_Probability = results$Headaches_Per_Week_Probability
)
})
# Run the API on a specified port (default is localhost:8000)
pr$run(port = 8000)
# Load necessary libraries
library(plumber)
library(randomForest)
library(jsonlite)
# Source the model function from the file random.tree.R
source("random.forest.R")  # Make sure random.tree.R contains the function_name function
#* @apiTitle Stress Prediction API
#* @apiDescription API to predict stress levels and headaches per week based on user input.
# Enable CORS to allow requests from the front end
# This allows interaction between the API and a web front end
pr <- plumber$new()
pr$handle("OPTIONS", "*", function(res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type")
res$setHeader("Access-Control-Max-Age", "86400")
res
})
#* Predict Stress Levels and Headaches
#* @param Sleep_Quality Sleep quality score (e.g., 1-10)
#* @param Academic_Performance Academic performance score (e.g., 1-100)
#* @param Study_Load Study load in hours per day
#* @param Extracurricular_Activities Hours of extracurricular activities per week
#* @post /predict
pr$handle("POST", "/predict", function(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities) {
# Convert inputs to numeric values
input_vector <- as.numeric(c(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities))
# Validate input: Check if all inputs are numeric
if (any(is.na(input_vector))) {
stop("Invalid input: all parameters must be numeric and not empty.")
}
# Call the model function with the input vector
results <- function_name(input_vector)
# Return the results as JSON
list(
Predicted_Stress_Levels = results$Stress_Levels,
Predicted_Headaches_Per_Week_Probability = results$Headaches_Per_Week_Probability
)
})
# Run the API on a specified port (default is localhost:8000)
pr$run(port = 8000)
# Load necessary libraries
library(plumber)
library(randomForest)
library(jsonlite)
# Source the model function from the file random.tree.R
source("random.forest.R")  # Make sure random.tree.R contains the function_name function
#* @apiTitle Stress Prediction API
#* @apiDescription API to predict stress levels and headaches per week based on user input.
# Enable CORS to allow requests from the front end
# This allows interaction between the API and a web front end
pr <- plumber$new()
pr$handle("OPTIONS", "*", function(res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type")
res$setHeader("Access-Control-Max-Age", "86400")
res
})
#* Predict Stress Levels and Headaches
#* @param Sleep_Quality
#* @param Academic_Performance
#* @param Study_Load
#* @param Extracurricular_Activities
#* @post /predict
pr$handle("POST", "/predict", function(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities) {
# Convert inputs to numeric values
input_vector <- as.numeric(c(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities))
# Validate input: Check if all inputs are numeric
if (any(is.na(input_vector))) {
stop("Invalid input: all parameters must be numeric and not empty.")
}
# Call the model function with the input vector
results <- function_name(input_vector)
# Return the results as JSON
list(
Predicted_Stress_Levels = results$Stress_Levels,
Predicted_Headaches_Per_Week_Probability = results$Headaches_Per_Week_Probability
)
})
# Run the API on a specified port (default is localhost:8000)
pr$run(port = 8000)
# Load necessary libraries
library(plumber)
library(randomForest)
library(jsonlite)
# Source the model function from the file random.tree.R
source("random.forest.R")  # Make sure random.tree.R contains the function_name function
#* @apiTitle Stress Prediction API
#* @apiDescription API to predict stress levels and headaches per week based on user input.
# Enable CORS to allow requests from the front end
# This allows interaction between the API and a web front end
pr <- plumber$new()
pr$handle("OPTIONS", "*", function(res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type")
res$setHeader("Access-Control-Max-Age", "86400")
res
})
#* Predict Stress Levels and Headaches
#* @param Sleep_Quality
#* @param Academic_Performance
#* @param Study_Load
#* @param Extracurricular_Activities
#* @post /predict
pr$handle("POST", "/predict", function(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities) {
# Convert inputs to numeric values
input_vector <- as.numeric(c(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities))
# Validate input: Check if all inputs are numeric
if (any(is.na(input_vector))) {
stop("Invalid input: all parameters must be numeric and not empty.")
}
# Call the model function with the input vector
results <- random.forest(input_vector)
# Return the results as JSON
list(
Predicted_Stress_Levels = results$Stress_Levels,
Predicted_Headaches_Per_Week_Probability = results$Headaches_Per_Week_Probability
)
})
# Run the API on a specified port (default is localhost:8000)
pr$run(port = 8000)
# Load necessary libraries
library(plumber)
library(randomForest)
library(jsonlite)
# Source the model function from the file random.tree.R
source("random.forest.R")  # Make sure random.tree.R contains the function_name function
#* @apiTitle Stress Prediction API
#* @apiDescription API to predict stress levels and headaches per week based on user input.
# Enable CORS to allow requests from the front end
# This allows interaction between the API and a web front end
pr <- plumber$new()
pr$handle("OPTIONS", "*", function(res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type")
res$setHeader("Access-Control-Max-Age", "86400")
res
})
#* Predict Stress Levels and Headaches
#* @param Sleep_Quality
#* @param Academic_Performance
#* @param Study_Load
#* @param Extracurricular_Activities
#* @post /predict
pr$handle("POST", "/predict", function(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities) {
# Convert inputs to numeric values
input_vector <- as.numeric(c(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities))
# Validate input: Check if all inputs are numeric
if (any(is.na(input_vector))) {
stop("Invalid input: all parameters must be numeric and not empty.")
}
# Call the model function with the input vector
results <- random.forest(input_vector)
# Return the results as JSON
list(
Predicted_Stress_Levels = results$Stress_Levels,
Predicted_Headaches_Per_Week_Probability = results$Headaches_Per_Week_Probability
)
})
# Run the API on a specified port (default is localhost:8000)
pr$run(port = 8000)
# Load necessary libraries
library(plumber)
library(randomForest)
library(jsonlite)
# Source the model function from the file random.tree.R
source("random.forest.R")  # Make sure random.tree.R contains the function_name function
#* @apiTitle Stress Prediction API
#* @apiDescription API to predict stress levels and headaches per week based on user input.
# Enable CORS to allow requests from the front end
# This allows interaction between the API and a web front end
pr <- plumber$new()
pr$handle("OPTIONS", "*", function(res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type")
res$setHeader("Access-Control-Max-Age", "86400")
res
})
#* Predict Stress Levels and Headaches
#* @param Sleep_Quality
#* @param Academic_Performance
#* @param Study_Load
#* @param Extracurricular_Activities
#* @post /predict
pr$handle("POST", "/predict", function(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities) {
# Convert inputs to numeric values
input_vector <- as.numeric(c(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities))
# Validate input: Check if all inputs are numeric
if (any(is.na(input_vector))) {
stop("Invalid input: all parameters must be numeric and not empty.")
}
# Call the model function with the input vector
results <- random.forest(input_vector)
# Return the results as JSON
list(
Predicted_Stress_Levels = results$Stress_Levels,
Predicted_Headaches_Per_Week_Probability = results$Headaches_Per_Week_Probability
)
})
# Run the API on a specified port (default is localhost:8000)
pr$run(port = 8000)
# Load necessary libraries
library(plumber)
library(randomForest)
library(jsonlite)
# Source the model function from the file random.tree.R
source("random.forest.R")  # Make sure random.tree.R contains the function_name function
#* @apiTitle Stress Prediction API
#* @apiDescription API to predict stress levels and headaches per week based on user input.
# Enable CORS to allow requests from the front end
# This allows interaction between the API and a web front end
pr <- plumber$new()
pr$handle("OPTIONS", "*", function(res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type")
res$setHeader("Access-Control-Max-Age", "86400")
res
})
#* Predict Stress Levels and Headaches
#* @param Sleep_Quality
#* @param Academic_Performance
#* @param Study_Load
#* @param Extracurricular_Activities
#* @post /predict
pr$handle("POST", "/predict", function(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities) {
# Convert inputs to numeric values
input_vector <- as.numeric(c(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities))
# Validate input: Check if all inputs are numeric
if (any(is.na(input_vector))) {
stop("Invalid input: all parameters must be numeric and not empty.")
}
# Call the model function with the input vector
results <- random.forest(input_vector)
# Return the results as JSON
list(
Predicted_Stress_Levels = results$Stress_Levels,
Predicted_Headaches_Per_Week_Probability = results$Headaches_Per_Week_Probability
)
})
# Run the API on a specified port (default is localhost:8000)
pr$run(port = 8000)
# Load necessary libraries
library(plumber)
library(randomForest)
library(jsonlite)
# Source the model function from the file random.tree.R
source("random.forest.R")  # Make sure random.tree.R contains the function_name function
#* @apiTitle Stress Prediction API
#* @apiDescription API to predict stress levels and headaches per week based on user input.
# Enable CORS to allow requests from the front end
# This allows interaction between the API and a web front end
pr <- plumber$new()
pr$handle("OPTIONS", "*", function(res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type")
res$setHeader("Access-Control-Max-Age", "86400")
res
})
#* Predict Stress Levels and Headaches
#* @param Sleep_Quality
#* @param Academic_Performance
#* @param Study_Load
#* @param Extracurricular_Activities
#* @post /predict
pr$handle("POST", "/predict", function(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities) {
# Convert inputs to numeric values
input_vector <- as.numeric(c(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities))
# Validate input: Check if all inputs are numeric
if (any(is.na(input_vector))) {
stop("Invalid input: all parameters must be numeric and not empty.")
}
# Call the model function with the input vector
results <- random.forest(input_vector)
# Return the results as JSON
list(
Predicted_Stress_Levels = results$Stress_Levels,
Predicted_Headaches_Per_Week_Probability = results$Headaches_Per_Week_Probability
)
})
# Run the API on a specified port (default is localhost:8000)
pr$run(port = 8000)
# Load necessary libraries
library(plumber)
library(randomForest)
library(jsonlite)
# Source the model function from the file random.tree.R
source("random.forest.R")  # Make sure random.tree.R contains the function_name function
#* @apiTitle Stress Prediction API
#* @apiDescription API to predict stress levels and headaches per week based on user input.
# Enable CORS to allow requests from the front end
# This allows interaction between the API and a web front end
pr <- plumber$new()
pr$handle("OPTIONS", "*", function(res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type")
res$setHeader("Access-Control-Max-Age", "86400")
res
})
#* Predict Stress Levels and Headaches
#* @param Sleep_Quality
#* @param Academic_Performance
#* @param Study_Load
#* @param Extracurricular_Activities
#* @post /predict
pr$handle("POST", "/predict", function(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities) {
# Convert inputs to numeric values
input_vector <- as.numeric(c(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities))
# Validate input: Check if all inputs are numeric
if (any(is.na(input_vector))) {
stop("Invalid input: all parameters must be numeric and not empty.")
}
# Call the model function with the input vector
results <- random.forest(input_vector)
# Return the results as JSON
list(
Predicted_Stress_Levels = results$Stress_Levels,
Predicted_Headaches_Per_Week_Probability = results$Headaches_Per_Week_Probability
)
})
# Run the API on a specified port (default is localhost:8000)
pr$run(port = 8000)
# Load necessary libraries
library(plumber)
library(randomForest)
library(jsonlite)
# Source the model function from the file random.tree.R
source("random.forest.R")  # Make sure random.tree.R contains the function_name function
#* @apiTitle Stress Prediction API
#* @apiDescription API to predict stress levels and headaches per week based on user input.
# Enable CORS to allow requests from the front end
# This allows interaction between the API and a web front end
pr <- plumber$new()
pr$handle("OPTIONS", "*", function(res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type")
res$setHeader("Access-Control-Max-Age", "86400")
res
})
#* Predict Stress Levels and Headaches
#* @param Sleep_Quality
#* @param Academic_Performance
#* @param Study_Load
#* @param Extracurricular_Activities
#* @post /predict
pr$handle("POST", "/predict", function(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities) {
# Convert inputs to numeric values
input_vector <- as.numeric(c(Sleep_Quality, Academic_Performance, Study_Load, Extracurricular_Activities))
# Validate input: Check if all inputs are numeric
if (any(is.na(input_vector))) {
stop("Invalid input: all parameters must be numeric and not empty.")
}
# Call the model function with the input vector
results <- random.forest(input_vector)
# Return the results as JSON
list(
Predicted_Stress_Levels = results$Stress_Levels,
Predicted_Headaches_Per_Week_Probability = results$Headaches_Per_Week_Probability
)
})
# Run the API on a specified port (default is localhost:8000)
pr$run(port = 8000)
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumber::plumb(file='api.R')$run()
random.forest <- function(input_vector) {
data <- read.csv("Student Stress Factors.csv")
library(randomForest)
library(glmnet)
library(caTools)
# Rename columns for clarity
colnames(data) <- c("Sleep_Quality", "Headaches_Per_Week", "Academic_Performance",
"Study_Load", "Extracurricular_Activities", "Stress_Levels")
# Adjust 'Headaches_Per_Week' by subtracting 1
data$Headaches_Per_Week <- data$Headaches_Per_Week - 1
# Set random seed for reproducibility and split the data
set.seed(123)
split <- sample.split(data$Stress_Levels, SplitRatio = 0.75)
train_data <- subset(data, split == TRUE)
test_data <- subset(data, split == FALSE)
# Prepare training and testing matrices
X_train <- as.matrix(train_data[, c("Sleep_Quality", "Academic_Performance", "Study_Load", "Extracurricular_Activities")])
Y_train_Stress_Levels <- train_data$Stress_Levels
Y_train_Headaches_Per_Week <- train_data$Headaches_Per_Week
X_test <- as.matrix(test_data[, c("Sleep_Quality", "Academic_Performance", "Study_Load", "Extracurricular_Activities")])
Y_test_Stress_Levels <- test_data$Stress_Levels
Y_test_Headaches_Per_Week <- test_data$Headaches_Per_Week
# Train Random Forest models
rf_model_Stress_Levels <- randomForest(X_train, Y_train_Stress_Levels, ntree = 100, importance = TRUE)
rf_model_Headaches_Per_Week <- randomForest(X_train, Y_train_Headaches_Per_Week, ntree = 100, importance = TRUE)
# Make predictions on test data
Stress_Levels_pred <- predict(rf_model_Stress_Levels, X_test)
Headaches_Per_Week_pred <- predict(rf_model_Headaches_Per_Week, X_test)
# Evaluate performance
rmse_Stress_Levels <- sqrt(mean((Y_test_Stress_Levels - Stress_Levels_pred)^2))
rmse_Headaches_Per_Week <- sqrt(mean((Y_test_Headaches_Per_Week - Headaches_Per_Week_pred)^2))
# Map input_vector to features
new_data <- data.frame(
Sleep_Quality = input_vector[1],
Academic_Performance = input_vector[2],
Study_Load = input_vector[3],
Extracurricular_Activities = input_vector[4]
)
# Make predictions for new data
Stress_Levels_pred_new <- predict(rf_model_Stress_Levels, new_data)
Headaches_Per_Week_pred_new <- predict(rf_model_Headaches_Per_Week, new_data)
# Return predictions as a list
return(list(Predicted_Stress_Levels = results$Stress_Levels,
Predicted_Headaches_Per_Week_Probability = results$Headaches_Per_Week_Probability))}
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumber::plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumber::plumb(file='api.R')$run()
